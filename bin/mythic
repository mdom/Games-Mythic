#!/usr/bin/perl

use strict;
use warnings;
use Games::Mythic;
use Term::ShellUI;

my $game = Games::Mythic->new();

my $term = Term::ShellUI->new(
    commands => {
        ask => {
            proc => sub {
                my $r = $game->ask(@_);
                print "Answer: $r->{answer}"
                  . ( $r->{event} ? " Event: $r->{event}" : '' )
                  . " Roll: $r->{roll}\n";
            },
            minargs => 1,
            maxargs => 2,
            args    => \&complete_ranks,
        },
        add => {
            cmds => {
                npc    => cmd_add_to_list('npc'),
                thread => cmd_add_to_list('thread'),
            },
        },
        remove => {
            cmds => {
                npc    => cmd_remove_from_list('npc'),
                thread => cmd_remove_from_list('thread'),
            },
        },
    },
);

sub cmd_add_to_list {
    my ($list) = @_;
    return {
        minargs => 1,
        proc    => sub {
            my $thing = join( ' ', @_ );
            my $method = "add_$list";
            $game->$method($thing);
            print "$thing added to list of ${list}s.\n";
        },
    };
}

sub cmd_remove_from_list {
    my ($list) = @_;
    return {
        args => [ sub { complete_list( @_, "${list}s" ) } ],
        proc => sub {
            my $thing = join( ' ', @_ );
            my $method = "remove_$list";
            $game->$method($thing);
            print "$thing removed from of ${list}s.\n";
        },
        minargs => 1,
    };
}

sub complete_ranks {
    my ( $self, $cmpl ) = @_;
    return complete_string( $self, $cmpl, $game->ranks );
}

sub complete_list {
    my ( $self, $cmpl, $list ) = @_;
    return complete_string( $self, $cmpl, $game->$list );
}

sub complete_string {
    my ( $self, $cmpl, $strings ) = @_;
    return [ grep { index( $_, $cmpl->{str} ) == 0 } @$strings ];
}

$term->run();
